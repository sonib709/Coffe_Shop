<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Data Dashboard</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {
            background: #1a1a2e;
            color: white;
            font-family: Arial, sans-serif;
            text-align: center;
        }
        h1 {
            color: #f72585;
        }
        .container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            padding: 20px;
        }
        .tile {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(255, 0, 150, 0.5);
            backdrop-filter: blur(10px);
        }
        input {
            margin: 20px;
            padding: 10px;
            background: #f72585;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }
    </style>
</head>
<body>

    <h1>Sales Data Dashboard</h1>
    <input type="file" id="fileInput" accept=".json">

    <div class="container">
        <div class="tile" id="chart1"></div>
        <div class="tile" id="chart2"></div>
        <div class="tile" id="chart3"></div>
        <div class="tile" id="chart4"></div>
        <div class="tile" id="chart5"></div>
        <div class="tile" id="chart6"></div>
    </div>

    <script>
        document.getElementById("fileInput").addEventListener("change", function(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const data = JSON.parse(e.target.result);
                generateDashboard(data);
            };
            reader.readAsText(file);
        });

        function generateDashboard(data) {
            const transactionDates = data.map(d => d.transaction_date);
            const transactionQty = data.map(d => d.transaction_qty);
            const unitPrices = data.map(d => d.unit_price);
            const categories = [...new Set(data.map(d => d.product_category))];
            const stores = [...new Set(data.map(d => d.store_location))];
            const storeSales = stores.map(store => {
                return data.filter(d => d.store_location === store).reduce((sum, d) => sum + (d.transaction_qty * d.unit_price), 0);
            });

            // 1. Transactions Over Time
            Plotly.newPlot('chart1', [{
                x: transactionDates,
                y: transactionQty,
                type: 'bar',
                marker: { color: '#f72585' }
            }], { title: "Transactions Over Time", paper_bgcolor: 'transparent', plot_bgcolor: 'transparent' });

            // 2. Sales Revenue by Store
            Plotly.newPlot('chart2', [{
                labels: stores,
                values: storeSales,
                type: 'pie'
            }], { title: "Sales Revenue by Store", paper_bgcolor: 'transparent', plot_bgcolor: 'transparent' });

            // 3. Product Categories Breakdown
            Plotly.newPlot('chart3', [{
                x: categories,
                y: categories.map(cat => data.filter(d => d.product_category === cat).length),
                type: 'bar',
                marker: { color: '#00f5d4' }
            }], { title: "Product Categories Breakdown", paper_bgcolor: 'transparent', plot_bgcolor: 'transparent' });

            // 4. Price Distribution
            Plotly.newPlot('chart4', [{
                x: unitPrices,
                type: 'histogram',
                marker: { color: '#ff9f1c' }
            }], { title: "Price Distribution", paper_bgcolor: 'transparent', plot_bgcolor: 'transparent' });

            // 5. Top Selling Products
            const productSales = data.reduce((acc, curr) => {
                acc[curr.product_detail] = (acc[curr.product_detail] || 0) + curr.transaction_qty;
                return acc;
            }, {});
            const sortedProducts = Object.entries(productSales).sort((a, b) => b[1] - a[1]);
            Plotly.newPlot('chart5', [{
                x: sortedProducts.map(p => p[0]),
                y: sortedProducts.map(p => p[1]),
                type: 'bar',
                marker: { color: '#7209b7' }
            }], { title: "Top Selling Products", paper_bgcolor: 'transparent', plot_bgcolor: 'transparent' });

            // 6. Sales Revenue Distribution
            Plotly.newPlot('chart6', [{
                x: transactionDates,
                y: data.map(d => d.transaction_qty * d.unit_price),
                mode: 'lines+markers',
                line: { color: '#3a86ff' }
            }], { title: "Sales Revenue Distribution", paper_bgcolor: 'transparent', plot_bgcolor: 'transparent' });
        }
    </script>

</body>
</html>
